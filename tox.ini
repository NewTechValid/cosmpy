[tox]
envlist = py39

[testenv:docs]
skipsdist = True
skip_install = True
deps =
    mkdocs-material
install_command = python3 ./install_packages.py requirements-docs.txt {packages}
commands = mkdocs build --clean

[testenv:docs-serve]
skipsdist = True
skip_install = True
deps =
    mkdocs-material
install_command = python3 ./install_packages.py requirements-docs.txt {packages}
commands = mkdocs build --clean
           python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
           mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
deps =
  darglint
  flake8
  flake8-copyright
  flake8-bugbear
  flake8-eradicate
  pydocstyle
  flake8-docstrings
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = flake8 cosmpy examples scripts tests setup.py

[testenv:black-check]
skipsdist = True
skip_install = True
deps =
  black
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = black --check --verbose cosmpy tests examples setup.py --exclude protos

[testenv:black]
skipsdist = True
skip_install = True
deps =
  black
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = black cosmpy tests examples setup.py --exclude protos

[testenv:isort-check]
skipsdist = True
skip_install = True
deps =
  isort
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = isort --check-only --verbose cosmpy tests examples setup.py

[testenv:isort]
skipsdist = True
skip_install = True
deps =
  isort
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = isort cosmpy tests examples setup.py

[testenv:vulture]
skipsdist = True
skip_install = True
deps =
  vulture
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = vulture cosmpy tests examples setup.py --exclude "*_pb2.py,*_pb2_grpc.py" --min-confidence 100

[testenv:bandit]
skipsdist = True
skip_install = True
deps =
  bandit
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands =
  bandit -r cosmpy tests --skip B101
  bandit -r examples --skip B101,B105

[testenv:safety]
skipsdist = True
skip_install = True
deps =
  safety
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = safety check -i 41002

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
  mypy
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = mypy cosmpy tests examples setup.py

[testenv:pylint]
skipsdist = True
skip_install = True
deps =
  pylint
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = pylint cosmpy tests examples setup.py

[testenv:test]
skipsdist = True
skip_install = True
deps =
  -rrequirements.txt
  -rrequirements-test.txt
commands = coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py

[testenv:test-unit]
skipsdist = True
skip_install = True
deps =
  -rrequirements.txt
  -rrequirements-test.txt
commands = coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py -m "not integration"

[testenv:test-integration]
skipsdist = True
skip_install = True
deps =
  -rrequirements.txt
  -rrequirements-test.txt
commands = coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py -m "integration"

[testenv:coverage-report]
skipsdist = True
skip_install = True
deps =
  coverage
install_command = python3 ./install_packages.py requirements-test.txt {packages}
commands = coverage report -m -i

[testenv:liccheck]
skipsdist = True
skip_install = True
deps =
  liccheck
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = 
  python -m pip install -r requirements.txt
  liccheck -s strategy.ini -r requirements.txt -l PARANOID

[testenv:copyright-check]
skipsdist = True
skip_install = True
commands = python scripts/check_copyright.py

[testenv:check-manifest]
skipsdist = True
skip_install = True
deps =
  check-manifest
install_command = python3 ./install_packages.py requirements-dev.txt {packages}
commands = check-manifest

[testenv:check_api_docs]
skipsdist = True
usedevelop = True
deps =
    pydoc-markdown==4.6.3
commands = python scripts/generate_api_docs.py --check-clean
